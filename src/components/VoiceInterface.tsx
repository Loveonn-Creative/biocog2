import { useState, useEffect } from "react";
import { Mic, MicOff, Volume2, Loader2 } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Card } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";

interface VoiceInterfaceProps {
  isOpen: boolean;
  onClose: () => void;
}

// Predefined Q&A for demo
const qaDemoData = [
  {
    question: "ESG ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à?",
    answer: "‡§Ø‡§π Environment, Social, Governance ‡§π‡•à‚Äî‡§Ü‡§™‡§ï‡§æ ‡§¨‡§ø‡§ú‡§º‡§®‡•á‡§∏ ‡§™‡•ç‡§∞‡§ï‡•É‡§§‡§ø, ‡§∏‡§Æ‡§æ‡§ú ‡§î‡§∞ ‡§®‡§ø‡§Ø‡§Æ‡•ã‡§Ç ‡§™‡§∞ ‡§ï‡•à‡§∏‡•á ‡§Ö‡§∏‡§∞ ‡§°‡§æ‡§≤‡§§‡§æ ‡§π‡•à‡•§"
  },
  {
    question: "‡§ï‡§æ‡§∞‡•ç‡§¨‡§® ‡§ï‡•ç‡§∞‡•á‡§°‡§ø‡§ü ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•ã‡§§‡§æ ‡§π‡•à?",
    answer: "‡§Ø‡§π ‡§™‡•ç‡§∞‡•Ç‡§´ ‡§π‡•à ‡§ï‡§ø ‡§Ü‡§™‡§®‡•á ‡§ï‡§æ‡§∞‡•ç‡§¨‡§® ‡§ò‡§ü‡§æ‡§Ø‡§æ‡•§ ‡§á‡§∏‡•á ‡§¨‡•á‡§ö‡§ï‡§∞ ‡§™‡•à‡§∏‡•á ‡§ï‡§Æ‡§æ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§ ‡§π‡§∞ 1 ‡§ü‡§® ‡§¨‡§ö‡§§ = 1 ‡§ï‡•ç‡§∞‡•á‡§°‡§ø‡§ü‡•§"
  },
  {
    question: "Green loan ‡§ï‡•à‡§∏‡•á ‡§Æ‡§ø‡§≤‡•á‡§ó‡§æ?",
    answer: "Biocog ‡§Ü‡§™‡§ï‡§æ ESG ‡§°‡•á‡§ü‡§æ ‡§¨‡•à‡§Ç‡§ï ‡§ï‡•ã ‡§≠‡•á‡§ú‡§§‡§æ ‡§π‡•à‡•§ ‡§Ü‡§™‡§ï‡•ã ‚Çπ5 ‡§≤‡§æ‡§ñ ‡§§‡§ï ‡§ï‡§æ ‡§≤‡•ã‡§® ‡§¨‡§ø‡§®‡§æ ‡§ó‡§æ‡§∞‡§Ç‡§ü‡•Ä ‡§Æ‡§ø‡§≤ ‡§∏‡§ï‡§§‡§æ ‡§π‡•à‡•§"
  }
];

export const VoiceInterface = ({ isOpen, onClose }: VoiceInterfaceProps) => {
  const [isListening, setIsListening] = useState(false);
  const [transcript, setTranscript] = useState("");
  const [response, setResponse] = useState("");
  const [isThinking, setIsThinking] = useState(false);
  const [currentLanguage, setCurrentLanguage] = useState("hi-IN");

  const languages = [
    { code: "hi-IN", name: "‡§π‡§ø‡§Ç‡§¶‡•Ä", flag: "üáÆüá≥" },
    { code: "en-IN", name: "English", flag: "üá¨üáß" },
    { code: "bn-IN", name: "‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ", flag: "üáßüá©" },
    { code: "mr-IN", name: "‡§Æ‡§∞‡§æ‡§†‡•Ä", flag: "üáÆüá≥" },
    { code: "ta-IN", name: "‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç", flag: "üáÆüá≥" }
  ];

  const startListening = () => {
    if (!('webkitSpeechRecognition' in window)) {
      alert('Voice recognition not supported in this browser');
      return;
    }

    const recognition = new (window as any).webkitSpeechRecognition();
    recognition.continuous = false;
    recognition.interimResults = true;
    recognition.lang = currentLanguage;

    recognition.onstart = () => {
      setIsListening(true);
      setTranscript("");
      setResponse("");
    };

    recognition.onresult = (event: any) => {
      const transcript = event.results[0][0].transcript;
      setTranscript(transcript);
    };

    recognition.onend = () => {
      setIsListening(false);
      if (transcript) {
        handleQuery(transcript);
      }
    };

    recognition.start();
  };

  const stopListening = () => {
    setIsListening(false);
  };

  const handleQuery = async (query: string) => {
    setIsThinking(true);
    
    // Simulate AI thinking time
    await new Promise(resolve => setTimeout(resolve, 1500));
    
    // Simple keyword matching for demo
    const matchedQA = qaDemoData.find(qa => 
      query.toLowerCase().includes(qa.question.toLowerCase().substring(0, 5)) ||
      query.toLowerCase().includes('esg') ||
      query.toLowerCase().includes('carbon') ||
      query.toLowerCase().includes('loan') ||
      query.toLowerCase().includes('credit')
    );

    if (matchedQA) {
      setResponse(matchedQA.answer);
      // Text-to-speech
      if ('speechSynthesis' in window) {
        const utterance = new SpeechSynthesisUtterance(matchedQA.answer);
        utterance.lang = currentLanguage;
        speechSynthesis.speak(utterance);
      }
    } else {
      const defaultResponse = currentLanguage.startsWith('hi') 
        ? "‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§Æ‡§¶‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç‡•§ ESG, ‡§ï‡§æ‡§∞‡•ç‡§¨‡§® ‡§ï‡•ç‡§∞‡•á‡§°‡§ø‡§ü ‡§Ø‡§æ ‡§ó‡•ç‡§∞‡•Ä‡§® ‡§≤‡•ã‡§® ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§™‡•Ç‡§õ‡•á‡§Ç‡•§"
        : "I can help you with ESG, carbon credits, or green loans. Please ask your question.";
      setResponse(defaultResponse);
    }
    
    setIsThinking(false);
  };

  const speakResponse = () => {
    if ('speechSynthesis' in window && response) {
      const utterance = new SpeechSynthesisUtterance(response);
      utterance.lang = currentLanguage;
      speechSynthesis.speak(utterance);
    }
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
      <Card className="w-full max-w-2xl bg-card/95 backdrop-blur-sm border-border">
        <div className="p-6 space-y-6">
          {/* Header */}
          <div className="flex items-center justify-between">
            <h2 className="text-2xl font-bold text-foreground">
              AI ‡§∏‡§π‡§æ‡§Ø‡§ï | AI Assistant
            </h2>
            <Button onClick={onClose} variant="ghost" size="sm">
              ‚úï
            </Button>
          </div>

          {/* Language Selection */}
          <div className="flex flex-wrap gap-2">
            {languages.map((lang) => (
              <Badge
                key={lang.code}
                variant={currentLanguage === lang.code ? "default" : "secondary"}
                className="cursor-pointer"
                onClick={() => setCurrentLanguage(lang.code)}
              >
                {lang.flag} {lang.name}
              </Badge>
            ))}
          </div>

          {/* Voice Controls */}
          <div className="text-center space-y-4">
            <div className={`mx-auto w-24 h-24 rounded-full flex items-center justify-center transition-all ${
              isListening ? 'bg-destructive voice-pulse' : 'bg-primary'
            }`}>
              {isListening ? (
                <MicOff className="w-10 h-10 text-white" onClick={stopListening} />
              ) : (
                <Mic className="w-10 h-10 text-white" onClick={startListening} />
              )}
            </div>
            
            <p className="text-muted-foreground">
              {isListening 
                ? (currentLanguage.startsWith('hi') ? "‡§∏‡•Å‡§® ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Ç..." : "Listening...")
                : (currentLanguage.startsWith('hi') ? "‡§¨‡•ã‡§≤‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ü‡•à‡§™ ‡§ï‡§∞‡•á‡§Ç" : "Tap to speak")
              }
            </p>
          </div>

          {/* Transcript */}
          {transcript && (
            <div className="bg-muted rounded-lg p-4">
              <p className="text-sm text-muted-foreground mb-2">
                {currentLanguage.startsWith('hi') ? "‡§Ü‡§™‡§®‡•á ‡§ï‡§π‡§æ:" : "You said:"}
              </p>
              <p className="text-foreground">{transcript}</p>
            </div>
          )}

          {/* AI Response */}
          {(isThinking || response) && (
            <div className="bg-primary/10 rounded-lg p-4">
              <div className="flex items-center justify-between mb-2">
                <p className="text-sm text-muted-foreground">
                  Biocog AI {currentLanguage.startsWith('hi') ? "‡§ï‡§æ ‡§ú‡§µ‡§æ‡§¨:" : "Response:"}
                </p>
                {response && (
                  <Button
                    onClick={speakResponse}
                    variant="ghost"
                    size="sm"
                    className="text-primary"
                  >
                    <Volume2 className="w-4 h-4" />
                  </Button>
                )}
              </div>
              
              {isThinking ? (
                <div className="flex items-center space-x-2">
                  <Loader2 className="w-4 h-4 animate-spin" />
                  <span className="text-muted-foreground">
                    {currentLanguage.startsWith('hi') ? "‡§∏‡•ã‡§ö ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Ç..." : "Thinking..."}
                  </span>
                </div>
              ) : (
                <p className="text-foreground">{response}</p>
              )}
            </div>
          )}

          {/* Quick Questions */}
          <div className="space-y-2">
            <p className="text-sm text-muted-foreground">
              {currentLanguage.startsWith('hi') ? "‡§ú‡§≤‡•ç‡§¶‡•Ä ‡§™‡•Ç‡§õ‡•á‡§Ç:" : "Quick questions:"}
            </p>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-2">
              {qaDemoData.slice(0, 2).map((qa, index) => (
                <Button
                  key={index}
                  variant="outline"
                  size="sm"
                  className="text-left justify-start h-auto p-3"
                  onClick={() => handleQuery(qa.question)}
                >
                  {qa.question}
                </Button>
              ))}
            </div>
          </div>
        </div>
      </Card>
    </div>
  );
};